# Interactive shell detection {{{

# If either of these are true, the shell is non-interactive.
# Exit without changing any settings or printing any output.
[[ $- != *i* ]] && return
[ -z "${PS1}" ] && return

# }}}

# Helper functions {{{

__stat_mode() {
    if [ "$(uname -s)" = "Darwin" ]; then
        stat -f '%A' "${@}"
    else
        stat -c '%a' "${@}"
    fi
}

__stat_mtime() {
    if [ "$(uname -s)" = "Darwin" ]; then
        stat -f '%m' "${@}"
    else
        stat -c '%Z' "${@}"
    fi
}

# }}}

# Basic settings {{{

# Increase session history size from the default 500
HISTSIZE=100000

# }}}

__prepend_path_if_exists() {
    # Remove any existing instances of directory from PATH
    PATH=$(echo "${PATH}" | sed -e 's/:/\n/g' | grep -ve "^${1}\$" | xargs | tr " " ":")
    # Prepend directory to PATH if directory exists
    [ -d "${1}" ] && PATH="${1}:${PATH}"
    return 0
}
__prepend_path_if_exists "/opt/homebrew/bin"
__prepend_path_if_exists "${HOME}/.dotfiles/bin"
__prepend_path_if_exists "${HOME}/.local/bin"
__prepend_path_if_exists "${HOME}/.ruby/bin"
__prepend_path_if_exists "${HOME}/bin"
__prepend_path_if_exists "${HOMEBREW_PREFIX}/opt/coreutils/libexec/gnubin"
__prepend_path_if_exists "${HOMEBREW_PREFIX}/opt/coreutils/libexec/gnuman"

# }}}

# Brew Installation
# If in codespaces or github codespaces skip brew installation
if [ ! -n "${GITHUB_CODESPACE_TOKEN}" ] && [ ! -n "${CODESPACES}" ]; then

    if ! command -v brew &>/dev/null; then
        echo "brew needs to be installed"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        (
            echo
            echo 'eval "$($HOMEBREW_PREFIX/bin/brew shellenv)"'
        ) >>~/.profile
        source ~/.profile
        eval "$($HOMEBREW_PREFIX/bin/brew shellenv)"
        # Install software from Brew
        # if ~/.config/Brewfile exists skip brew install
        if [ ! -f ~/.config/Brewfile ]; then
            brew bundle
            touch ~/.config/Brewfile
        fi
        
        # Install brew files only if on mac
        if [ "$(uname -s)" = "Darwin" ]; then
            brew bundle --file Brewfile.mac
        fi
    fi
fi
# }}}

# PyEnv Configuration {{{
if [ ! -n "${GITHUB_CODESPACE_TOKEN}" ] && [ ! -n "${CODESPACES}" ]; then
    if ! command -v pyenv &>/dev/null; then
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init --path)"
        eval "$(pyenv init -)"
    fi
fi

# Git configuration {{{

if which code >/dev/null 2>&1; then
    if [[ $(git config --get merge.tool) == false ]]; then
        echo "Setting up git..."
        echo "VS Code found. Configuring Git to use it."
        git config --global merge.tool vscode
        git config --global mergetool.vscode.cmd 'code --wait --merge $REMOTE $LOCAL $BASE $MERGED'
        git config --global diff.tool vscode
        git config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'
    fi
fi

# }}}

# GnuPG configuration {{{

if [ "$(__stat_mode ~/.gnupg 2>/dev/null)" != "700" ]; then
    chmod 0700 ~/.gnupg
    chmod -R og-rwx ~/.gnupg
fi

GPG_TTY=$(tty)
export GPG_TTY
echo "test" | gpg --clearsign >/dev/null 2>&1

# If not code spaces add to gpg-agent.conf
if [ ! -n "${GITHUB_CODESPACE_TOKEN}" ] && [ ! -n "${CODESPACES}" ]; then
    echo "max-cache-ttl 1800" >>~/.gnupg/gpg-agent.conf
    echo "default-cache-ttl 1800" >>~/.gnupg/gpg-agent.conf
fi

# If darwin add brew gpg to gitconfig
if [ "$(uname -s)" = "Darwin" ]; then
    if command -v brew &>/dev/null; then
        if command -v gpg &>/dev/null; then
            if [ ! -f "${HOME}/.local/gitconfig" ]; then
                touch ~/.local/gitconfig
            fi
            if ! grep -q "program = $(which gpg)" "${HOME}/.local/gitconfig"; then
                echo "[gpg]
    program = $(which gpg)
                " >>${HOME}/.local/gitconfig
            fi
            if ! grep -q "pinentry-program /opt/homebrew/bin/pinentry-mac" "${HOME}/.gnupg/gpg-agent.conf"; then
                echo "pinentry-program /opt/homebrew/bin/pinentry-mac" >>~/.gnupg/gpg-agent.conf
            fi
        fi
    fi
fi

# }}}

# ssh configuration {{{

if [ -z "${SSH_CONNECTION}" ]; then
    SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
    export SSH_AUTH_SOCK
fi

# }}}

# Docker configuration {{{

## Required to make podman and cosign work together
export DOCKER_CONFIG=~/.config/containers

# }}}

# Homebrew configuration {{{

export HOMEBREW_NO_ENV_HINTS=1

if [ ! -n "${GITHUB_CODESPACE_TOKEN}" ] && [ ! -n "${CODESPACES}" ]; then
    # if amd mac then use brew86
    if [ "$(uname -s)" = "Darwin" ]; then
        if [ "$(uname -m)" = "arm64" ]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
            alias brew86="arch --x86_64 /usr/local/bin/brew"
        fi
    fi
fi

# }}}

# Pyenv configuration {{{

if [ ! -n "${GITHUB_CODESPACE_TOKEN}" ] && [ ! -n "${CODESPACES}" ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)" || true
fi

# }}}

# iterm configuration {{{
if [ "$(uname -s)" = "Darwin" ]; then
    if [ -n "${ITERM_PROFILE}" ]; then
        export ITERM_PROFILE
    fi
fi

if [ -n "${ITERM_PROFILE}" ]; then
    if [ -f "${HOME}/.iterm2_shell_integration.zsh" ]; then
        source "${HOME}/.iterm2_shell_integration.zsh"
    fi
fi

# }}}

# Pin Entry Configuration {{{
if [ "$(uname -s)" = "Darwin" ]; then
    if [ ! -f "${HOME}/.gnupg/gpg-agent.conf" ]; then
        mkdir -p "${HOME}/.gnupg"
        touch "${HOME}/.gnupg/gpg-agent.conf"
        echo "pinentry-program $(which pinentry-mac)" >>~/.gnupg/gpg-agent.conf
    else
        if ! grep -q "pinentry-program $(which pinentry-mac)" "${HOME}/.gnupg/gpg-agent.conf"; then
            echo "pinentry-program $(which pinentry-mac)" >>~/.gnupg/gpg-agent.conf
        fi
    fi
fi

# }}}

# TabTab Configuration {{{
# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/__tabtab.zsh ]] && . ~/.config/tabtab/__tabtab.zsh || true
# }}}

# GO Configuration {{{
if [ ! -n "${GITHUB_CODESPACE_TOKEN}" ] && [ ! -n "${CODESPACES}" ]; then
    GO_VERSION=1.21.1
    # If brew is installed use brew to download go
    # Otherwise install go directly
    if command -v brew &>/dev/null; then
        if ! command -v go &>/dev/null; then
            echo "Installing go"
            brew bundle
        fi
    else
        echo "Installing go"
        wget https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz
        sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
        rm go${GO_VERSION}.linux-amd64.tar.gz
    fi
    export GOPATH=$HOME/golang
    export PATH=$PATH:$GOPATH/bin
fi
# }}}

# NVM Configuration {{{
# If NVM configure
if [ ! -n "${GITHUB_CODESPACE_TOKEN}" ] && [ ! -n "${CODESPACES}" ]; then
    if ! command -v nvm &>/dev/null; then
        export NVM_DIR="$HOME/.nvm"
        [ -s "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh" ] && . "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh"                                       # This loads nvm
        [ -s "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm" ] && . "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion
    fi
fi

# Load additional configuration {{{

__source_if_exists() {
    if [ -f "${1}" ]; then
        . "${1}"
    fi
}

# Host-specific bashrc if available
__source_if_exists ~/.dotfiles/lib/bashrc."${HOSTNAME}"

# Aliases and helper functions
__source_if_exists ~/.dotfiles/shell/aliases

# Local configuration files
__source_if_exists ~/.local/shell-rc
__source_if_exists ~/.local/shell-aliases

# }}}

# Display basic settings on first invocation {{{

if [ ! -f "${DOTFILES_DATA}/welcome_message" ]; then
    "${HOME}"/.dotfiles/bin/dotfiles-first-run
fi

# }}}

# Cleanup {{{

# Unset local helper functions
unset -f __source_if_exists
unset -f __prepend_path_if_exists
unset -f __stat_mode

# }}}
